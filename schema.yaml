openapi: 3.1.0
info:
  title: Todo List Public API
  version: 0.1.0
  description: A simple Todo List API
  contact:
    name: Developer
    email: viacheslav.teslovych@student.uzhnu.edu.ua
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/login/refresh/:
    post:
      operationId: auth_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/register/:
    post:
      operationId: auth_register_create
      description: Registers a new user.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth/user/:
    get:
      operationId: auth_user_retrieve
      description: Returns a current user object. Only authenticated users are allowed.
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /todos/:
    get:
      operationId: todos_list
      description: List all todo items. Only authenticated users are allowed.
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
          description: ''
    post:
      operationId: todos_create
      description: Create a new todo item. Only authenticated users are allowed.
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Todo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
  /todos/{id}/:
    get:
      operationId: todos_retrieve
      description: Detail of a todo item. Only authenticated users are allowed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The id of the todo item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
    put:
      operationId: todos_update
      description: Update a todo item. Only authenticated users are allowed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The id of the todo item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Todo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
    patch:
      operationId: todos_partial_update
      description: Partial update of a todo item. Only authenticated users are allowed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The id of the todo item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodo'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: ''
    delete:
      operationId: todos_destroy
      description: Delete a todo item. Only authenticated users are allowed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The id of the todo item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    PatchedTodo:
      type: object
      description: |-
        This is a serializer for a model called Todo.
        It defines the fields that will be included in the serialized output when the Todo model is serialized.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        completed:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
    Todo:
      type: object
      description: |-
        This is a serializer for a model called Todo.
        It defines the fields that will be included in the serialized output when the Todo model is serialized.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        completed:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - title
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: |-
        This is a serializer for a model called User.
        It defines the fields that will be included in the serialized output when the User model is serialized.
      properties:
        username:
          type: string
          maxLength: 50
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
      required:
      - email
      - first_name
      - last_name
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
